version: "3.8"

services:
  traefik:
    image: traefik:v3.4

    networks:
      - labs_proxy

    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/certs:/certs:ro
      - ./traefik/traefik.yaml:/etc/traefik/traefik.yaml:ro

    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager

      labels:
        - "traefik.enable=true"
        - "traefik.http.services.traefik.loadbalancer.server.port=8080"

        # Dashboard configuration
        - "traefik.http.routers.traefik.rule=Host(`traefik.histweetyy.cc`)"
        - "traefik.http.routers.traefik.entrypoints=web"
        - "traefik.http.routers.traefik.service=api@internal"
        - "traefik.http.routers.traefik.tls=true"
        # TLS configuration
        - "traefik.tls.certificates.certfile=/certs/local.crt"
        - "traefik.tls.certificates.keyfile=/certs/local.key"

  whoami:
    image: traefik/whoami
    networks:
      - labs_proxy
    deploy:
      labels:
        - "traefik.enable=true"
        # Whoami service configuration
        - "traefik.http.routers.whoami.rule=Host(`whoami.histweetyy.cc`)"
        - "traefik.http.routers.whoami.entrypoints=web"
        - "traefik.http.routers.whoami.service=whoami"
        - "traefik.http.routers.whoami.tls=true"
        - "traefik.http.services.whoami.loadbalancer.server.port=80"

  web:
    image: httpd:alpine
    networks:
      - labs_proxy
    ports:
      - target: 80
        published: 8080
        protocol: tcp
        mode: host
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

networks:
  labs_proxy:
    name: labs_proxy
    driver: overlay
    attachable: true
